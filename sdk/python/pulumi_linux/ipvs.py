# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['IpvsArgs', 'Ipvs']

@pulumi.input_type
class IpvsArgs:
    def __init__(__self__, *,
                 provision: pulumi.Input[bool],
                 ssh_connection: pulumi.Input['SshConnectionArgs']):
        """
        The set of arguments for constructing a Ipvs resource.
        :param pulumi.Input[bool] provision: Install ipvsadm and modules on target instance
        :param pulumi.Input['SshConnectionArgs'] ssh_connection: The parameters with which to connect to the remote host
        """
        if provision is None:
            provision = True
        pulumi.set(__self__, "provision", provision)
        pulumi.set(__self__, "ssh_connection", ssh_connection)

    @property
    @pulumi.getter
    def provision(self) -> pulumi.Input[bool]:
        """
        Install ipvsadm and modules on target instance
        """
        return pulumi.get(self, "provision")

    @provision.setter
    def provision(self, value: pulumi.Input[bool]):
        pulumi.set(self, "provision", value)

    @property
    @pulumi.getter(name="sshConnection")
    def ssh_connection(self) -> pulumi.Input['SshConnectionArgs']:
        """
        The parameters with which to connect to the remote host
        """
        return pulumi.get(self, "ssh_connection")

    @ssh_connection.setter
    def ssh_connection(self, value: pulumi.Input['SshConnectionArgs']):
        pulumi.set(self, "ssh_connection", value)


class Ipvs(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 provision: Optional[pulumi.Input[bool]] = None,
                 ssh_connection: Optional[pulumi.Input[pulumi.InputType['SshConnectionArgs']]] = None,
                 __props__=None):
        """
        IPVS is used to set up, maintain or inspect the virtual server table in the Linux kernel. The Linux Virtual Server can be used to build scalable network services based on a cluster of two or more nodes. The active node of the cluster redirects service requests to a collection of server hosts that will actually perform the services. Supported features include two protocols (TCP and UDP), three packet-forwarding methods (NAT, tunneling, and direct routing), and eight load balancing algorithms (round robin, weighted round robin, least-connection, weighted least-connection, locality-based least-connection, locality-based least-connection with replication, destination-hashing, and source-hashing).
        The connection is established via ssh.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] provision: Install ipvsadm and modules on target instance
        :param pulumi.Input[pulumi.InputType['SshConnectionArgs']] ssh_connection: The parameters with which to connect to the remote host
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpvsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        IPVS is used to set up, maintain or inspect the virtual server table in the Linux kernel. The Linux Virtual Server can be used to build scalable network services based on a cluster of two or more nodes. The active node of the cluster redirects service requests to a collection of server hosts that will actually perform the services. Supported features include two protocols (TCP and UDP), three packet-forwarding methods (NAT, tunneling, and direct routing), and eight load balancing algorithms (round robin, weighted round robin, least-connection, weighted least-connection, locality-based least-connection, locality-based least-connection with replication, destination-hashing, and source-hashing).
        The connection is established via ssh.

        :param str resource_name: The name of the resource.
        :param IpvsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpvsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 provision: Optional[pulumi.Input[bool]] = None,
                 ssh_connection: Optional[pulumi.Input[pulumi.InputType['SshConnectionArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpvsArgs.__new__(IpvsArgs)

            if provision is None:
                provision = True
            if provision is None and not opts.urn:
                raise TypeError("Missing required property 'provision'")
            __props__.__dict__["provision"] = provision
            if ssh_connection is None and not opts.urn:
                raise TypeError("Missing required property 'ssh_connection'")
            __props__.__dict__["ssh_connection"] = ssh_connection
        super(Ipvs, __self__).__init__(
            'linux:index:Ipvs',
            resource_name,
            __props__,
            opts,
            remote=True)

