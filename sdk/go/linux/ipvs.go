// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linux

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IPVS is used to set up, maintain or inspect the virtual server table in the Linux kernel. The Linux Virtual Server can be used to build scalable network services based on a cluster of two or more nodes. The active node of the cluster redirects service requests to a collection of server hosts that will actually perform the services. Supported features include two protocols (TCP and UDP), three packet-forwarding methods (NAT, tunneling, and direct routing), and eight load balancing algorithms (round robin, weighted round robin, least-connection, weighted least-connection, locality-based least-connection, locality-based least-connection with replication, destination-hashing, and source-hashing).
// The connection is established via ssh.
type Ipvs struct {
	pulumi.ResourceState
}

// NewIpvs registers a new resource with the given unique name, arguments, and options.
func NewIpvs(ctx *pulumi.Context,
	name string, args *IpvsArgs, opts ...pulumi.ResourceOption) (*Ipvs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SshConnection == nil {
		return nil, errors.New("invalid value for required argument 'SshConnection'")
	}
	if isZero(args.Provision) {
		args.Provision = pulumi.Bool(true)
	}
	args.SshConnection = args.SshConnection.ToSshConnectionOutput().ApplyT(func(v SshConnection) SshConnection { return *v.Defaults() }).(SshConnectionOutput)
	var resource Ipvs
	err := ctx.RegisterRemoteComponentResource("linux:index:Ipvs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type ipvsArgs struct {
	// Install ipvsadm and modules on target instance
	Provision bool `pulumi:"provision"`
	// The parameters with which to connect to the remote host
	SshConnection SshConnection `pulumi:"sshConnection"`
}

// The set of arguments for constructing a Ipvs resource.
type IpvsArgs struct {
	// Install ipvsadm and modules on target instance
	Provision pulumi.BoolInput
	// The parameters with which to connect to the remote host
	SshConnection SshConnectionInput
}

func (IpvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipvsArgs)(nil)).Elem()
}

type IpvsInput interface {
	pulumi.Input

	ToIpvsOutput() IpvsOutput
	ToIpvsOutputWithContext(ctx context.Context) IpvsOutput
}

func (*Ipvs) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipvs)(nil)).Elem()
}

func (i *Ipvs) ToIpvsOutput() IpvsOutput {
	return i.ToIpvsOutputWithContext(context.Background())
}

func (i *Ipvs) ToIpvsOutputWithContext(ctx context.Context) IpvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpvsOutput)
}

// IpvsArrayInput is an input type that accepts IpvsArray and IpvsArrayOutput values.
// You can construct a concrete instance of `IpvsArrayInput` via:
//
//          IpvsArray{ IpvsArgs{...} }
type IpvsArrayInput interface {
	pulumi.Input

	ToIpvsArrayOutput() IpvsArrayOutput
	ToIpvsArrayOutputWithContext(context.Context) IpvsArrayOutput
}

type IpvsArray []IpvsInput

func (IpvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipvs)(nil)).Elem()
}

func (i IpvsArray) ToIpvsArrayOutput() IpvsArrayOutput {
	return i.ToIpvsArrayOutputWithContext(context.Background())
}

func (i IpvsArray) ToIpvsArrayOutputWithContext(ctx context.Context) IpvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpvsArrayOutput)
}

// IpvsMapInput is an input type that accepts IpvsMap and IpvsMapOutput values.
// You can construct a concrete instance of `IpvsMapInput` via:
//
//          IpvsMap{ "key": IpvsArgs{...} }
type IpvsMapInput interface {
	pulumi.Input

	ToIpvsMapOutput() IpvsMapOutput
	ToIpvsMapOutputWithContext(context.Context) IpvsMapOutput
}

type IpvsMap map[string]IpvsInput

func (IpvsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipvs)(nil)).Elem()
}

func (i IpvsMap) ToIpvsMapOutput() IpvsMapOutput {
	return i.ToIpvsMapOutputWithContext(context.Background())
}

func (i IpvsMap) ToIpvsMapOutputWithContext(ctx context.Context) IpvsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpvsMapOutput)
}

type IpvsOutput struct{ *pulumi.OutputState }

func (IpvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipvs)(nil)).Elem()
}

func (o IpvsOutput) ToIpvsOutput() IpvsOutput {
	return o
}

func (o IpvsOutput) ToIpvsOutputWithContext(ctx context.Context) IpvsOutput {
	return o
}

type IpvsArrayOutput struct{ *pulumi.OutputState }

func (IpvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipvs)(nil)).Elem()
}

func (o IpvsArrayOutput) ToIpvsArrayOutput() IpvsArrayOutput {
	return o
}

func (o IpvsArrayOutput) ToIpvsArrayOutputWithContext(ctx context.Context) IpvsArrayOutput {
	return o
}

func (o IpvsArrayOutput) Index(i pulumi.IntInput) IpvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipvs {
		return vs[0].([]*Ipvs)[vs[1].(int)]
	}).(IpvsOutput)
}

type IpvsMapOutput struct{ *pulumi.OutputState }

func (IpvsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipvs)(nil)).Elem()
}

func (o IpvsMapOutput) ToIpvsMapOutput() IpvsMapOutput {
	return o
}

func (o IpvsMapOutput) ToIpvsMapOutputWithContext(ctx context.Context) IpvsMapOutput {
	return o
}

func (o IpvsMapOutput) MapIndex(k pulumi.StringInput) IpvsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipvs {
		return vs[0].(map[string]*Ipvs)[vs[1].(string)]
	}).(IpvsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpvsInput)(nil)).Elem(), &Ipvs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpvsArrayInput)(nil)).Elem(), IpvsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpvsMapInput)(nil)).Elem(), IpvsMap{})
	pulumi.RegisterOutputType(IpvsOutput{})
	pulumi.RegisterOutputType(IpvsArrayOutput{})
	pulumi.RegisterOutputType(IpvsMapOutput{})
}
